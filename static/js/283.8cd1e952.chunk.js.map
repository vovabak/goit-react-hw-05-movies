{"version":3,"file":"static/js/283.8cd1e952.chunk.js","mappings":"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","sources":["api/Api.jsx","pages/movieDetails/MovieDetails.styled.jsx","pages/movieDetails/MovieDetails.jsx"],"sourcesContent":["import axios from \"axios\";\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nconst params = {        \n        api_key: '2fb750d568eb262625e8479b2db30963',        \n    }\n\nexport async function getMovieTrends(page, media_type = 'movie', time_window = 'week') {\n    params.page = page;\n        \n    const response = await axios.get(`${BASE_URL}trending/${media_type}/${time_window}`, {params});\n    return response;    \n}\n\nexport async function getMovies(query, page) {    \n    params.query = query;\n    params.page = page; \n    \n    const response = await axios.get(`${BASE_URL}search/movie`, {params});\n    return response;    \n}\n\nexport async function getMovieById(movie_id) {   \n    \n    const response = await axios.get(`${BASE_URL}movie/${movie_id}`, {params});\n    return response;    \n}\n\nexport async function getCast(movie_id) {    \n    \n    const response = await axios.get(`${BASE_URL}movie/${movie_id}/credits`, {params});\n    return response;    \n}\n\nexport async function getReview(movie_id) {    \n    \n    const response = await axios.get(`${BASE_URL}movie/${movie_id}/reviews`, {params});\n    return response;    \n}\n","import { NavLink } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nexport const Main = styled.main`    \n    background-color: #fffbf5\n    `\n\nexport const Poster = styled.img`\n    display: block;\n    padding-left: 20px;\n    padding-bottom: 20px;\n    `\n\nexport const Info = styled.div`\n    padding-left: 20px;\n    padding-bottom: 20px;\n    width: 60%;\n    `\n\nexport const Thumb = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n    margin-top: 20px;\n    `\n\nexport const Title = styled.h1`\n    margin: 0;\n    `\n\nexport const Text = styled.p`\n    margin: 0;\n    margin-top: 10px\n    `\n\nexport const Link = styled(NavLink)`\n    display: inline-block;\n    text-decoration: none;\n    border-bottom: 1px solid tomato;\n    padding: 10px 10px 5px 10px;    \n    color: black;\n\n        :hover, :focus {\n            color: gray;\n        }\n    `","import { useParams, Outlet, useLocation } from \"react-router-dom\";\nimport { useState, useEffect, useRef, Suspense } from \"react\";\nimport { getMovieById } from \"api/Api\";\nimport { Main, Link, Info, Poster, Thumb, Title, Text } from \"./MovieDetails.styled\";\n\nconst MovieDetails = () => {\n    const [movie, setMovie] = useState(null);\n    const { movieId } = useParams();    \n    const location = useLocation();\n    const toBackRef = useRef(location).current.state?.from ?? '/';\n    const id = Number(movieId.slice(1));\n \n    \n    useEffect(() => {\n        getMovieById(id).then(res => setMovie(res.data))\n    }, [id])\n\n        \n    if(!movie) return\n    \n    const { title, overview, poster_path, vote_average, genres } = movie;\n    const genre = genres.map(genre => genre.name).join(', ');\n    \n    return (        \n        <Main>\n            <Link to={toBackRef}>Back to movie list</Link>\n            <Thumb>\n                <Poster src={`https://image.tmdb.org/t/p/w200${poster_path}`} alt=\"title\" />\n                <Info>\n                    <Title>{title}</Title>\n                    <Text><b>Audience rate:</b> {(vote_average * 10).toFixed(1)}%</Text>\n                    <Text><b>Plot:</b> {overview}</Text>\n                    <Text><b>Genre:</b> {genre}</Text>\n                </Info>\n            </Thumb>\n            <Link to={'cast'}>Cast</Link>\n            <Link to={'reviews'} style={{marginLeft: '10px'}}>Reviews</Link>\n            <Suspense>\n                <Outlet context={id} />\n            </Suspense>\n        </Main>\n    )\n}\n\nexport default MovieDetails;"],"names":["BASE_URL","params","api_key","getMovieTrends","page","media_type","time_window","axios","response","getMovies","query","getMovieById","movie_id","getCast","getReview","Main","styled","Poster","Info","Thumb","Title","Text","Link","NavLink","useState","movie","setMovie","movieId","useParams","location","useLocation","toBackRef","useRef","current","state","from","id","Number","slice","useEffect","then","res","data","title","overview","poster_path","vote_average","genre","genres","map","name","join","to","src","alt","toFixed","style","marginLeft","Suspense","context"],"sourceRoot":""}